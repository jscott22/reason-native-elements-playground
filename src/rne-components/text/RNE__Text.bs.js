// Generated by BUCKLESCRIPT VERSION 3.1.4, PLEASE EDIT WITH CARE
'use strict';

var Block = require("bs-platform/lib/js/block.js");
var ReasonReact = require("reason-react/src/ReasonReact.js");
var Text$BsReactNative = require("bs-react-native/src/components/text.js");
var Style$BsReactNative = require("bs-react-native/src/style.js");
var Platform$BsReactNative = require("bs-react-native/src/platform.js");

var onAndroid = Platform$BsReactNative.os(/* () */0) === /* Android */0;

var boldStyles = onAndroid ? Style$BsReactNative.fontWeight(/* Bold */737455525) : Style$BsReactNative.fontWeight(/* Normal */-453122489);

function headingStyle(initial, headingMode) {
  if (headingMode) {
    switch (headingMode[0]) {
      case 0 : 
          return /* :: */[
                  Style$BsReactNative.fontSize(/* Float */Block.__(0, [60])),
                  /* :: */[
                    boldStyles,
                    initial
                  ]
                ];
      case 1 : 
          return /* :: */[
                  Style$BsReactNative.fontSize(/* Float */Block.__(0, [34])),
                  /* :: */[
                    boldStyles,
                    initial
                  ]
                ];
      case 2 : 
          return /* :: */[
                  Style$BsReactNative.fontSize(/* Float */Block.__(0, [28])),
                  /* :: */[
                    boldStyles,
                    initial
                  ]
                ];
      case 3 : 
          return /* :: */[
                  Style$BsReactNative.fontSize(/* Float */Block.__(0, [22])),
                  /* :: */[
                    boldStyles,
                    initial
                  ]
                ];
      
    }
  } else {
    return initial;
  }
}

function fontFamilyStyle(initial, family) {
  if (family) {
    return /* :: */[
            Style$BsReactNative.fontFamily(family[0]),
            initial
          ];
  } else {
    return initial;
  }
}

function getFontStyles(headingMode, fontFamily) {
  var initial = onAndroid ? /* :: */[
      Style$BsReactNative.fontFamily("sans-serif"),
      /* [] */0
    ] : /* [] */0;
  return fontFamilyStyle(headingStyle(initial, headingMode), fontFamily);
}

function getCombinedStyles(userStyles, headingMode, fontFamily) {
  var fontStyles = getFontStyles(headingMode, fontFamily);
  if (userStyles) {
    return Style$BsReactNative.concat(/* :: */[
                userStyles[0],
                /* :: */[
                  Style$BsReactNative.style(fontStyles),
                  /* [] */0
                ]
              ]);
  } else {
    return Style$BsReactNative.style(fontStyles);
  }
}

var component = ReasonReact.statelessComponent("RNEText");

function make(userStyles, headingMode, fontFamily, children) {
  return /* record */[
          /* debugName */component[/* debugName */0],
          /* reactClassInternal */component[/* reactClassInternal */1],
          /* handedOffState */component[/* handedOffState */2],
          /* willReceiveProps */component[/* willReceiveProps */3],
          /* didMount */component[/* didMount */4],
          /* didUpdate */component[/* didUpdate */5],
          /* willUnmount */component[/* willUnmount */6],
          /* willUpdate */component[/* willUpdate */7],
          /* shouldUpdate */component[/* shouldUpdate */8],
          /* render */(function () {
              return ReasonReact.element(/* None */0, /* None */0, Text$BsReactNative.make(/* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* Some */[getCombinedStyles(userStyles, headingMode, fontFamily)], /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, children));
            }),
          /* initialState */component[/* initialState */10],
          /* retainedProps */component[/* retainedProps */11],
          /* reducer */component[/* reducer */12],
          /* subscriptions */component[/* subscriptions */13],
          /* jsElementWrapped */component[/* jsElementWrapped */14]
        ];
}

exports.onAndroid = onAndroid;
exports.boldStyles = boldStyles;
exports.headingStyle = headingStyle;
exports.fontFamilyStyle = fontFamilyStyle;
exports.getFontStyles = getFontStyles;
exports.getCombinedStyles = getCombinedStyles;
exports.component = component;
exports.make = make;
/* onAndroid Not a pure module */
